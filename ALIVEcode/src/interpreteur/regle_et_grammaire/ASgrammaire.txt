"""
    Tout ce qui ce trouve entre ces symboles (""") est un commentaire

    Explications:
    1. tout ce qui se retrouve sous la section [Ajouter] est considere comme une syntaxe a ajouter
    2. tout ce qui se retrouve sous la section [Ignorer] est considéré comme une syntaxe a ignorer
    3. Syntaxe a ajouter:
        ex: PLUS -> \+

        3.1 Nom de la regle a ajouter (en majuscule, remplacer les espaces par des _) (ex: PLUS)
        3.2 Symbole '->'
        3.3 regular expression pour detecter la regle (ex: \+ ) (note: si la regular expression commence par un espace, mettre [ ])
    
    4. Syntaxe a ignorer:
        ex: \s+
        4.1 regular expression pour detecter la regle (ex: \s+ )
    
    5. Que ce soit pour une regle a ajouter ou a ignorer, chaque regle doit etre separe par un retour a la ligne

    6. les regles qui se retrouve sous la section [Structure] indique comment reparer la fin d'un bout de code:
        6.1 FIN_LIGNE indique la fin d'une ligne
        6.2 DEBUT_BLOC indique le dÃ©but d'un bloc de code
        6.3 FIN_BLOC indique la fin d'un bloc de code
    
    7. il est possible de regrouper certaines regles dans une meme categorie. Pour ce faire, il suffit de mettre:
        ex: categorie1 {
            regle1 -> pattern1
            regle2 -> pattern2
            regle3 -> pattern3
            ...
            }
            categorie2 {
            regle1 -> pattern1
            regle2 -> pattern2
            regle3 -> pattern3
            ...
            }
        rassembler les regles dans des categories est OPTIONNEL.

        ATTENTION:
        il 'est pas recommander de nommer une categorie 'expression'
	
	8. Section [Style] (pour ajouter des styles):
		8.1 écrire le nom de la catégorie/le nom de la regle	-> 		nom de la classe dans le fichier LinterSyle.css
		
"""


[Ajouter]
    COMMENTAIRE		->		#.*
    
    commandes {
        AFFICHER    ->      \bafficher\b
        LIRE        ->      \blire\b
        ATTENDRE	->		\battendre\b
        UTILISER	->		\butiliser\b        
    }
    
    
    methode_moteur {
    	AVANCER				->		\bavancer\b
    	RECULER				->		\breculer\b
    	ARRETER				->		\barreter\b
    	TOURNER				->		\btourner\b
    	TOURNER_DROITE		->		\btournerDroite\b
    	TOURNER_GAUCHE		->		\btournerGauche\b
    }
    
    
    arithmetique {
        PLUS            ->      \+
        EXP             ->      \^
        MUL             ->      \*
        MOINS           ->      -
        DIV             ->      \/
        DIV_ENTIERE		->		\/\/
        MOD             ->      [%]
    }
    
    
    # constantes
    CONSTANTE		->		\bconst\b

    # operateur
    ASSIGNEMENT     ->      =
    
    # fonction
    FONCTION 		->		\bfonction\b
    RETOURNER		->		\bretourner\b


    # structure
    STRUCTURE 		->		\bstructure\b


    blocs {
	    SI              ->      \bsi\b
	    SINON           ->      \bsinon\b
	    
	    
	    # bloc pour
	    POUR            ->      \bpour\b
	    REPETER			->		\brepeter\b
	    TROIS_POINT     ->      \.\.\.
	    BOND			->		\bbond\b
	    DANS			->		\bdans\b
	
	
	    # bloc tant que
	    TANT_QUE        ->      \btant que\b
	    FAIRE           ->      \bfaire\b
	}
	
	
	SORTIR			->		\bsortir\b

    
    # fin
    FIN					->		\bfin\b


    type_de_donnees {
        ENTIER          ->      -?\d+
        DECIMAL         ->      -?\d+\.\d+|-?\d+\.(?!\.)|-?(?<!\.)\.\d+
        TEXTE           ->      ".*?"|'.*?'
        BOOLEEN         ->      \bvrai\b|\bfaux\b
        NUL             ->      \bnul\b
    }
    

    
    nom_type_de_donnees {
        NOM_ENTIER          ->     	\bentier\b
        NOM_DECIMAL         ->     	\bdecimal\b
        NOM_TEXTE           ->     	\btexte\b
        NOM_BOOLEEN         ->     	\bbooleen\b
        NOM_LISTE			->		\bliste\b
        NOM_FONCTION		->		\bfonc\b
    }


    comparaison {
        EGAL            ->      ==
        PAS_EGAL        ->      !=
        PLUS_GRAND      ->      >
        PLUS_PETIT      ->      <
        PLUS_GRAND_EGAL ->      >=
        PLUS_PETIT_EGAL ->      <=
    }

    porte_logique {
	    ET              ->      \bet\b
	    OU              ->      \bou\b
	    PAS             ->      \bpas\b
    }

    # separateur
    PARENT_OUV      ->      [(]
    PARENT_FERM     ->      [)]
    
    # iterateur
    CROCHET_OUV		->		\[
    CROCHET_FERM	->		\]


    # sous-categorie
    # le point indique aussi un nombre decimal
    POINT           ->      \.
    
    VIRGULE			->		[,]
    
    DEUX_POINTS		->		[:]
    
    POINT_VIRGULE	->		[;]
    
    PIPE			->		[|]

    NOM_VARIABLE    ->      \w+
    NOM_VARIABLE 	->		\w+(\.\w+)*
    


[Ignorer]
    \s+




















