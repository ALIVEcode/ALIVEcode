import { Matrix } from "../AIUtils";

/**
 * This class is used to store a dataset from the application's database in order to use
 * it inside the application. It uses the Parameter class to store each dataset's column
 * into the same object
 */
export class GeneralDataset {

  private params: Parameter[] = [];

  /**
   * Constructor of the class. Generates an empty dataset with the specified 
   * Parameters.
   * @param paramNames an array containing names for each Parameter.
   * @param inputsOutputs the role of each Parameter ("i" for input, "o" for output, anything else for undefined).
   */
  constructor(paramNames: string[], inputsOutputs: string[]) {
    let inputOutput: string;
    
    for (let i: number = 0; i < paramNames.length; i++) {
      inputOutput = (i >= inputsOutputs.length) ? "undefined" : inputsOutputs[i];
      this.addParam(paramNames[i], inputOutput);
    }
  }

  /**
   * Adds a new Parameter to the GeneralDataset.
   * @param paramName the new Parameter's name.
   * @param inputOutput the new Parameter's role ("i" for input, "o" for output, anything else for undefined).
   */
  public addParam(paramName: string, inputOutput: string) {
    this.params.push(new Parameter(paramName, inputOutput));
  }

  /**
   * Adds a Matrix of data to the GeneralDataset. Each row of the Matrix shoud correspond to the 
   * Parameter in the same order that they were added.
   * @param data the Matrix of data.
   */
  public addDataset(data: Matrix) {
    if (data.getRows() !== this.params.length) {
      console.error("Error : data doesn't have the same amount of rows as the number of parameters.");
    } else {
      for (let i: number = 0; i < this.params.length; i++) {
        this.params[i].addData(data.getMatrixRow(i).getValue()[0]);
      }
    }
  }

  /**
   * Returns a Matrix with all input Parameters from the GeneralDataset, where each row is a different input parameter
   * and each column is related to the same situation.
   * @returns the input Matrix.
   */
  public getInputs(): Matrix {
    let inputData: number[][] = [];
    this.params.map((param) => {
      if (param.getIO() === "i") inputData.push(param.getData());
    })
    return new Matrix(inputData);
  }

  /**
   * Returns a Matrix with all output Parameters from the GeneralDataset, where each row is a different output parameter
   * and each column is related to the same situation.
   * @returns the output Matrix.
   */
  public getOutputs(): Matrix {
    let outputData: number[][] = [];
    this.params.map((param) => {
      if (param.getIO() === "o") outputData.push(param.getData());
    })
    if (outputData.length === 0) return new Matrix(1, 1);
    return new Matrix(outputData);
  }
}

/**
 * This class represents a parameter of a dataset generated by the GeneralDataset class. 
 * It contains information such as its name, its role (input, output or undefined) and the related data.
 */
export class Parameter {
  
  private data: any[];
  
  /**
   * Constructor of the class. Initializes the object with a name, a role ("i" for input, 
   * "o" for output, anything else for undefined), and an empty data array.
   * @param name 
   * @param inputOutput 
   */
  constructor(
    private name: string,
    private inputOutput: string
  ) {
    this.data = [];
  }

  /**
   * Adds an array of data to this Parameter. If the Parameter already has data, appends the new data to it.
   * @param newData an array of data to add.
   */
  public addData(newData: any[]) {
    for (let i: number = 0; i < newData.length; i++) {
      this.data.push(newData[i]);
    }
  }

  /**
   * Returns the name of this Parameter.
   * @returns the Parameter's name.
   */
  public getName(): string {
    return this.name;
  }

  /**
   * Returns the role of this Parameter ("i" for input, "o" for output,
   * anything else for undefined).
   * @returns the Parameter's role.
   */
  public getIO(): string {
    return this.inputOutput;
  }

  /**
   * Returns the data inside this Parameter.
   * @returns the Parameter's data.
   */
  public getData(): any[] {
    return this.data;
  }

  public get(index: number): any {
    if (index < 0 || index >= this.data.length) {
      return "Error : index out of bound";
    } else return this.data[index];
  }
}